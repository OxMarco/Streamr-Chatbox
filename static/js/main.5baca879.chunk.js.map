{"version":3,"sources":["../../src/components/Wallet.jsx","../../src/style.js","../../src/index.js","App.jsx","index.js"],"names":["Wallet","provider","useState","useEffect","a","address","str","setFormattedAddress","beautifyWallet","keyframes","ChatboxBase","styled","Button","PanelMain","PanelHistory","PanelFooter","ChatboxInput","PanelHeader","PopupFooter","ClearFix","Message","MessageSelf","MessageSelfData","MessageData","MsgList","ChatBoxPopupHistory","ChatboxOpen","open","ChatboxClose","ChatboxPopup","ChatboxPanel","ChatboxPopupHeader","ChatboxTitle","ChatboxPopupMain","Chatbox","DEBUG","stream","auth","ethereum","window","setClient","console","streamID","cleanText","DOMPurify","message","from","metadata","time","relativeTime","Date","msg","self","text","when","setMessages","messages","subscribeToStream","handleChange","e","setText","handleSubmit","client","element","document","listener","event","onClick","setPopup","setClose","icon","size","close","popup","style","flex","aria-hidden","marginTop","backgroundColor","border","borderRadius","setMax","setPanel","setOpen","id","key","index","type","placeholder","autoFocus","onChange","value","color","textAlign","panel","max","library","theme","PropTypes","bool","ethers","require","App","setAddress","injectedProvider","setInjectedProvider","connected","setConnected","providers","Web3Provider","send","signer","getSigner","getAddress","walletAddress","fetchAccountData","className","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.5baca879.chunk.js","sourcesContent":["import {\n  useEffect,\n  useState\n} from \"react\";\n\nfunction Wallet({\n  address,\n  provider\n}) {\n  const [formattedAddress, setFormattedAddress] = useState(\"\");\n\n  useEffect(() => {\n    async function beautifyWallet() {\n      if (address !== \"\" && address !== undefined && provider != null && typeof(provider) == \"object\") {\n        let str = await provider.lookupAddress(address);\n        if (str === null) {\n          str = address.substring(0, 5).concat(\"...\").concat(address.substring(38, 42));\n        }\n        setFormattedAddress(str);\n      }\n    }\n    beautifyWallet();\n  }, [address, provider]);\n\n  return (\n    formattedAddress\n  );\n}\n\nexport default Wallet;","// first of all I am thinking whether we do really need styled-components\n// as there is not so much styling going on in the package\n// Avoiding the styled-components would results in this project\n// being a npm-package that would not weight so much\n\nimport styled, { keyframes } from \"styled-components\";\n\n// is it used anywhere? \nconst fadeinout = keyframes`\n0% {\n    opacity: 0.6;\n  }\n  50% {\n    opacity: 0.2;\n  }\n  100% {\n    opacity: 0;\n  }\n`;\n\n// is it used anywhere? \nconst display = keyframes`\n0% {\n    opacity: 0.2;\n  }\n  50% {\n    opacity: 0.6;\n  }\n  100% {\n    opacity: 1;\n  }\n  `;\n\n\n// is !important really needed here, it is considered bad practice\n// when it turns out not to be essential  \nexport const ChatboxBase = styled.div`\n  word-wrap: break-word !important;\n  font-family: \"Lato\", sans-serif;\n`;\n\nexport const Button = styled.button`\n  color: inherit;\n  background-color: transparent;\n  border: 0;\n  outline: 0 !important;\n  cursor: pointer;\n`;\n\nexport const PanelMain = styled.main`\n  box-sizing: border-box;\n  width: 100%;\n  padding: calc(2 * #{16px}) #{16px};\n  line-height: calc(#{16px} + #{16px} / 2);\n  color: #888;\n  text-align: center;\n  flex: 1 1 auto;\n`;\n\nexport const PanelHistory = styled.div`\n  padding: 30px 30px 20px;\n  border-bottom: 2px solid white;\n  overflow-y: scroll;\n  height: 60vh;\n`;\n\nexport const PanelFooter = styled.footer`\n  box-sizing: border-box;\n  display: flex;\n  width: 100%;\n  padding: 16px;\n  border-top: 1px solid #ddd;\n  align-items: center;\n  justify-content: space-around;\n  flex: 0 0 auto;\n`;\n\nexport const ChatboxInput = styled.textarea`\n  box-sizing: border-box;\n  width: 100%;\n  margin: 0;\n  height: calc(#{16px} + #{16px} / 2);\n  padding: 0 calc(#{16px} / 2);\n  font-family: inherit;\n  font-size: 16px;\n  line-height: calc(#{16px} + #{16px} / 2);\n  color: #888;\n  background-color: none;\n  border: 0;\n  outline: 0 !important;\n  resize: none;\n  overflow: hidden;\n\n  &::placeholder {\n    color: #888;\n  }\n`;\n\nexport const PanelHeader = styled.header`\n  box-sizing: border-box;\n  display: flex;\n  width: 100%;\n  padding: 16px;\n  color: #fff;\n  background-color: #0360a5;\n  align-items: center;\n  justify-content: space-around;\n  flex: 0 0 auto;\n`;\n\nexport const PopupFooter = styled.footer`\n  box-sizing: border-box;\n  display: flex;\n  width: 100%;\n  padding: 16px;\n  border-top: 1px solid #ddd;\n  align-items: center;\n  justify-content: space-around;\n  border-bottom-right-radius: 12px;\n  border-bottom-left-radius: 12px;\n`;\n\nexport const ClearFix = styled.li`\n  &:after {\n    visibility: hidden;\n    display: block;\n    font-size: 0;\n    content: \" \";\n    clear: both;\n    height: 0;\n  }\n`;\n\nexport const Message = styled.div`\n  background: #86bb71;\n  float: left;\n  color: white;\n  padding: 18px 20px;\n  line-height: 26px;\n  font-size: 16px;\n  border-radius: 7px;\n  margin-bottom: 30px;\n  width: 70%;\n  position: relative;\n\n  &:after {\n    bottom: 100%;\n    left: 7%;\n    border: solid transparent;\n    content: \" \";\n    height: 0;\n    width: 0;\n    position: absolute;\n    pointer-events: none;\n    border-bottom-color: #86bb71 !important;\n    border-width: 10px;\n    margin-left: -10px;\n  }\n`;\n\nexport const MessageSelf = styled.div`\n  background: #94c2ed;\n  float: right;\n  color: white;\n  padding: 18px 20px;\n  line-height: 26px;\n  font-size: 16px;\n  border-radius: 7px;\n  margin-bottom: 30px;\n  width: 70%;\n  position: relative;\n\n  &:after {\n    bottom: 100%;\n    left: 7%;\n    border: solid transparent;\n    content: \" \";\n    height: 0;\n    width: 0;\n    position: absolute;\n    pointer-events: none;\n    border-bottom-color: #86bb71;\n    border-width: 10px;\n    margin-left: -10px;\n    border-bottom-color: #94c2ed;\n    left: 93%;\n  }\n`;\n\nexport const MessageSelfData = styled.div`\n  margin-bottom: 10px;\n  text-align: right;\n`;\n\nexport const MessageData = styled.div`\n  margin-bottom: 10px;\n  text-align: left;\n`;\n\nexport const MsgList = styled.ul`\n  list-style: none;\n  padding-left: 0px;\n`;\n\nexport const ChatBoxPopupHistory = styled.div`\n  padding: 30px 30px 20px;\n  border-bottom: 2px solid white;\n  overflow-y: scroll;\n  height: 250px;\n`;\n\nexport const ChatboxOpen = styled.button`\n  color: inherit;\n  background-color: transparent;\n  border: 0;\n  outline: 0 !important;\n  cursor: pointer;\n  position: fixed;\n  bottom: 0;\n  right: 0;\n  width: 52px;\n  height: 52px;\n  color: #fff;\n  background-color: #0360a5;\n  background-position: center center;\n  background-repeat: no-repeat;\n  box-shadow: 12px 15px 20px 0 rgba(46, 61, 73, 0.15);\n  border: 0;\n  border-radius: 50%;\n  cursor: pointer;\n  margin: 16px;\n  ${({ open }) =>\n    open\n      ? `\n      -webkit-animation: display .2s linear forwards;\n      animation: display .2s linear forwards;\n      display: block !important;\n      `\n      : `\n    -webkit-animation: fadeinout .2s linear forwards;\n      animation: fadeinout .2s linear forwards;\n      display: none !important\n`}\n`;\n\nexport const ChatboxClose = styled.button`\n  color: inherit;\n  background-color: transparent;\n  border: 0;\n  outline: 0 !important;\n  cursor: pointer;\n  position: fixed;\n  bottom: 0;\n  right: 0;\n  width: 52px;\n  height: 52px;\n  color: #fff;\n  background-color: #0360a5;\n  background-position: center center;\n  background-repeat: no-repeat;\n  box-shadow: 12px 15px 20px 0 rgba(46, 61, 73, 0.15);\n  border: 0;\n  border-radius: 50%;\n  cursor: pointer;\n  display: none;\n  margin: 16px 84px 16px 16px;\n  ${({ open }) =>\n    open\n      ? `\n      -webkit-animation: display .2s linear forwards;\n      animation: display .2s linear forwards;\n      display: block !important;\n      `\n      : `\n    -webkit-animation: fadeinout .2s linear forwards;\n      animation: fadeinout .2s linear forwards;\n      display: none !important\n`}\n`;\n\nexport const ChatboxPopup = styled.section`\n  display: flex;\n  position: absolute;\n  box-shadow: 5px 5px 25px 0 rgba(46, 61, 73, 0.2);\n  flex-direction: column;\n  /* repeated display property */ \n  display: none;\n  bottom: 84px;\n  right: 16px;\n  width: 377px;\n  height: auto;\n  background-color: #fff;\n  border-radius: 16px;\n  ${({ open }) =>\n    open\n      ? `\n      -webkit-animation: display .2s linear forwards;\n      animation: display .2s linear forwards;\n      display: flex !important;\n      `\n      : `\n    -webkit-animation: fadeinout .2s linear forwards;\n      animation: fadeinout .2s linear forwards;\n      display: none !important\n`}\n`;\n\nexport const ChatboxPanel = styled.section`\n  display: flex;\n  position: absolute;\n  box-shadow: 5px 5px 25px 0 rgba(46, 61, 73, 0.2);\n  flex-direction: column;\n  display: none;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  width: 377px;\n  background-color: #fff;\n  ${({ open }) =>\n    open\n      ? `\n      -webkit-animation: display .2s linear forwards;\n      animation: display .2s linear forwards;\n      display: flex !important;\n      `\n      : `\n    -webkit-animation: fadeinout .2s linear forwards;\n      animation: fadeinout .2s linear forwards;\n      display: none !important\n`}\n`;\n\nexport const ChatboxPopupHeader = styled.header`\n  box-sizing: border-box;\n  display: flex;\n  width: 100%;\n  padding: 16px;\n  color: #fff;\n  background-color: #0360a5;\n  align-items: center;\n  justify-content: space-around;\n  border-top-right-radius: 12px;\n  border-top-left-radius: 12px;\n`;\n\nexport const ChatboxTitle = styled.h1`\n  margin: 0;\n  font-size: 16px;\n  line-height: 1;\n`;\n\nexport const ChatboxPopupMain = styled.main`\n  box-sizing: border-box;\n  width: 100%;\n  padding: 32šx 16px;\n  line-height: 24px;\n  color: #888;\n  text-align: center;\n`;\n","import React, { useEffect, useState } from \"react\";\r\nimport StreamrClient from \"streamr-client\";\r\nimport PropTypes from \"prop-types\";\r\nimport DOMPurify from \"dompurify\";\r\nimport RelativeTime from \"@yaireo/relative-time\";\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { library } from '@fortawesome/fontawesome-svg-core';\r\nimport { faComment, faTimes, faUserCircle, faWindowMaximize, faWindowRestore, faPaperPlane } from '@fortawesome/free-solid-svg-icons';\r\nimport Wallet from \"./components/Wallet\";\r\nimport {\r\n  ChatboxBase,\r\n  ChatboxClose,\r\n  ChatboxOpen,\r\n  ChatboxPanel,\r\n  ChatboxPopup,\r\n  ChatboxPopupHeader,\r\n  ChatboxTitle,\r\n  ChatboxPopupMain,\r\n  Button,\r\n  ChatBoxPopupHistory,\r\n  MsgList,\r\n  ClearFix,\r\n  MessageSelfData,\r\n  MessageSelf,\r\n  MessageData,\r\n  Message,\r\n  PopupFooter,\r\n  ChatboxInput,\r\n  PanelHeader,\r\n  PanelMain,\r\n  PanelHistory,\r\n  PanelFooter,\r\n} from \"./style\";\r\n\r\nlibrary.add(faComment, faTimes, faUserCircle, faWindowMaximize, faWindowRestore, faPaperPlane);\r\n\r\n// theme is not used anywhere, matter of code practices but I usually omit such value\r\nfunction Chatbox({ theme, provider, address, streamID, DEBUG = true }) {\r\n  const [messages, setMessages] = useState([]);\r\n  const [text, setText] = useState(\"\");\r\n  const [client, setClient] = useState();\r\n\r\n  // do the setStates above useEffect, just to make the code easier to read\r\n  const [panel, setPanel] = useState(false);\r\n  const [popup, setPopup] = useState(false);\r\n  const [open, setOpen] = useState(true);\r\n  const [close, setClose] = useState(false);\r\n  const [max, setMax] = useState(false);\r\n\r\n  // a side not, there are quite a lot of setStates in the component\r\n  // perhaps just to make it easier to handle in future, it would better\r\n  // be to introduce some machine state here (xState etc. ?)\r\n\r\n  // not sure of the specifics of streams here, but dont we want to \r\n  // unsubscribe on unmount ? If so then return callback from useEffect\r\n  // https://stackoverflow.com/questions/55020041/react-hooks-useeffect-cleanup-for-only-componentwillunmount\r\n  useEffect(() => {\r\n    const subscribeToStream = async () => {\r\n      const stream = new StreamrClient({\r\n        auth: {\r\n          ethereum: window.ethereum, // TODO use injectedProvider\r\n        },\r\n      });\r\n\r\n      setClient(stream);\r\n\r\n      // please add brackets after if {}, will be less prone to errors\r\n      // and following the best practices\r\n      // btw do we want to do the console logs in external npm package ? \r\n      if (DEBUG) { \r\n        console.log(\"Subscribing...\");\r\n      }\r\n\r\n      await stream.subscribe(\r\n        {\r\n          stream: streamID,\r\n        },\r\n        (message, metadata) => {\r\n          console.log(\"message received\", metadata);\r\n\r\n          // const instead of var ! \r\n          const cleanText = DOMPurify.sanitize(message.msg);\r\n          const from = metadata.messageId.publisherId;\r\n          const relativeTime = new RelativeTime();\r\n          const time = relativeTime.from(\r\n            new Date(metadata.messageId.timestamp)\r\n          );\r\n\r\n          const msg = {\r\n            self: from === address.toLowerCase() ? true : false,\r\n            from, // not needed from: from \r\n            text: cleanText,\r\n            when: time,\r\n          };\r\n\r\n          setMessages((messages) => [...messages, msg]);\r\n        }\r\n      );\r\n\r\n      if (DEBUG) console.log(\"Subscribed\");\r\n    };\r\n    subscribeToStream();\r\n  }, [streamID, address]);\r\n\r\n  // Handle popup events\r\n\r\n  // Open = true &&\r\n\r\n  const handleMaximise = () => {\r\n    setMax(true);\r\n    setPanel(true);\r\n    /*\r\n    let panel = document.querySelector(\".chatbox-panel\");\r\n    panel.classList.remove(\"chatbox-hide\");\r\n    panel.classList.add(\"chatbox-show\");*/\r\n    // add display flex\r\n\r\n    setPopup(false);\r\n    /*\r\n    let popup = document.querySelector(\".chatbox-popup\");\r\n    popup.classList.remove(\"chatbox-show\");\r\n    popup.classList.add(\"chatbox-hide\");*/\r\n\r\n    setOpen(false);\r\n    /*\r\n    let buttonOpen = document.querySelector(\".chatbox-open\");\r\n    buttonOpen.classList.remove(\"chatbox-show\");\r\n    buttonOpen.classList.add(\"chatbox-hide\");*/\r\n\r\n    setClose(false);\r\n    /*\r\n    let buttonClose = document.querySelector(\".chatbox-close\");\r\n    buttonClose.classList.remove(\"chatbox-show\");\r\n    buttonClose.classList.add(\"chatbox-hide\");*/\r\n  };\r\n\r\n  // Open = false &&\r\n\r\n  const handleMinimise = () => {\r\n    setMax(false);\r\n    setPanel(false);\r\n    /*\r\n    let panel = document.querySelector(\".chatbox-panel\");\r\n    panel.classList.remove(\"chatbox-show\");\r\n    panel.classList.add(\"chatbox-hide\");*/\r\n\r\n    // Passed\r\n    setPopup(true);\r\n    /*\r\n    let popup = document.querySelector(\".chatbox-popup\");\r\n    popup.classList.remove(\"chatbox-hide\");\r\n    popup.classList.add(\"chatbox-show\");*/\r\n\r\n    // ?\r\n    setOpen(true);\r\n    /*\r\n    let buttonOpen = document.querySelector(\".chatbox-open\");\r\n    buttonOpen.classList.remove(\"chatbox-hide\");\r\n    buttonOpen.classList.add(\"chatbox-show\");*/\r\n\r\n    // Passed\r\n    setClose(true);\r\n    /*\r\n    let buttonClose = document.querySelector(\".chatbox-close\");\r\n    buttonClose.classList.remove(\"chatbox-hide\");\r\n    buttonClose.classList.add(\"chatbox-show\");*/\r\n\r\n    // ?\r\n  };\r\n\r\n  // Open = false && Working\r\n\r\n  const handleClosePanel = () => {\r\n    setPanel(false);\r\n    setOpen(true);\r\n\r\n    /*\r\n    let panel = document.querySelector(\".chatbox-panel\");\r\n    panel.classList.remove(\"chatbox-show\");\r\n    panel.classList.add(\"chatbox-hide\");\r\n\r\n    let buttonOpen = document.querySelector(\".chatbox-open\");\r\n    buttonOpen.classList.remove(\"chatbox-hide\");\r\n    buttonOpen.classList.add(\"chatbox-show\");*/\r\n  };\r\n\r\n  // Open = false && Working\r\n\r\n  const handleClose = () => {\r\n    setPopup(false);\r\n    setClose(false);\r\n\r\n    /*\r\n    let panel = document.querySelector(\".chatbox-popup\");\r\n    panel.classList.remove(\"chatbox-show\");\r\n    panel.classList.add(\"chatbox-hide\");\r\n\r\n    let button = document.querySelector(\".chatbox-close\");\r\n    button.classList.remove(\"chatbox-show\");\r\n    button.classList.add(\"chatbox-hide\");*/\r\n  };\r\n\r\n  // Open = true && Working\r\n\r\n  const handleOpen = () => {\r\n    setPopup(true);\r\n    setClose(true);\r\n\r\n    /*\r\n    let panel = document.querySelector(\".chatbox-popup\");\r\n    panel.classList.remove(\"chatbox-hide\");\r\n    panel.classList.add(\"chatbox-show\");\r\n\r\n    let button = document.querySelector(\".chatbox-close\");\r\n    button.classList.remove(\"chatbox-hide\");\r\n    button.classList.add(\"chatbox-show\"); */\r\n  };\r\n\r\n  const handleChange = (e) => {\r\n    setText(e.target.value);\r\n  };\r\n\r\n  const handleSubmit = async () => {\r\n\r\n    if (DEBUG) { \r\n      console.log(\"Publishing message: \" + text);\r\n    }\r\n    const message = {\r\n      msg: text,\r\n    };\r\n\r\n    await client.publish(streamID, message);\r\n\r\n    setText(\"\");\r\n\r\n    if (DEBUG) {\r\n      console.log(\"message sent\");\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    var element = document.getElementById(\"scroll\");\r\n    element.scrollTop = element.scrollHeight;\r\n  }, [messages]);\r\n\r\n  useEffect(() => {\r\n    const listener = async (event) => {\r\n      if (event.code === \"Enter\" || event.code === \"NumpadEnter\") {\r\n        event.preventDefault();\r\n        await handleSubmit();\r\n      }\r\n    };\r\n    document.addEventListener(\"keydown\", listener);\r\n    \r\n    return () => {\r\n      document.removeEventListener(\"keydown\", listener);\r\n    };\r\n  });\r\n\r\n  return (\r\n    <ChatboxBase>\r\n      <ChatboxOpen onClick={handleOpen} open={open}>\r\n        <FontAwesomeIcon icon={['fa', 'comment']} size=\"2x\" />\r\n      </ChatboxOpen>\r\n      <ChatboxClose onClick={handleClose} open={close}>\r\n        <FontAwesomeIcon icon={['fa', 'times']} size=\"2x\" />\r\n      </ChatboxClose>\r\n      <ChatboxPopup open={popup}>\r\n        <ChatboxPopupHeader>\r\n          <aside style={{ flex: 3 }}>\r\n            <FontAwesomeIcon icon={['fa', 'user-circle']} size=\"4x\" \r\n              aria-hidden=\"true\"\r\n              style={{\r\n                marginTop: \"-32px\",\r\n                backgroundColor: \"#0360a5\",\r\n                border: \"5px solid rgba(0,0,0,0.1)\",\r\n                borderRadius: \"50%\",\r\n              }}\r\n            />\r\n          </aside>\r\n          <aside style={{ flex: 8 }}>\r\n            <ChatboxTitle>\r\n              <small>Publishing as:</small>\r\n              <br />\r\n              <Wallet address={address} provider={provider} />\r\n            </ChatboxTitle>\r\n          </aside>\r\n          <aside style={{ flex: 1 }}>\r\n            <Button onClick={handleMaximise}>\r\n              <FontAwesomeIcon icon={['fa', 'window-maximize']}/>\r\n            </Button>\r\n          </aside>\r\n        </ChatboxPopupHeader>\r\n\r\n        <ChatboxPopupMain>\r\n          <ChatBoxPopupHistory id=\"scroll\">\r\n            <MsgList>\r\n              {messages.length === 0 && (\r\n                <div>\r\n                  A fully decentralised chatbox <br /> powered by Streamr.\r\n                </div>\r\n              )}\r\n              {messages.map((message, index) => (\r\n                <ClearFix key={index}>\r\n                  {message.self && (\r\n                    <div>\r\n                      <MessageSelfData>\r\n                        <small>{message.when}</small>&nbsp;&nbsp;&nbsp;\r\n                        <span>\r\n                          <Wallet address={message.from} provider={provider} />\r\n                        </span>\r\n                      </MessageSelfData>\r\n                      <MessageSelf>{message.text}</MessageSelf>\r\n                    </div>\r\n                  )}\r\n                  {!message.self && (\r\n                    <div>\r\n                      <MessageData>\r\n                        <span>\r\n                          <Wallet address={message.from} provider={provider} />\r\n                        </span>\r\n                        &nbsp;&nbsp;&nbsp;<small>{message.when}</small>\r\n                      </MessageData>\r\n                      <Message>{message.text}</Message>\r\n                    </div>\r\n                  )}\r\n                </ClearFix>\r\n              ))}\r\n            </MsgList>\r\n          </ChatBoxPopupHistory>\r\n        </ChatboxPopupMain>\r\n\r\n        <PopupFooter>\r\n          <aside style={{ flex: 10 }}>\r\n            <ChatboxInput\r\n              type=\"text\"\r\n              placeholder=\"Type your message here...\"\r\n              autoFocus\r\n              onChange={handleChange}\r\n              value={text}\r\n            ></ChatboxInput>\r\n          </aside>\r\n          <aside style={{ flex: 1, color: \"#888\", textAlign: \"center\" }}>\r\n            <FontAwesomeIcon icon={['fa', 'paper-plane']} onClick={handleSubmit} />\r\n          </aside>\r\n        </PopupFooter>\r\n      </ChatboxPopup>\r\n\r\n      <ChatboxPanel open={panel}>\r\n        <PanelHeader>\r\n          <aside style={{ flex: 3 }}>\r\n          <FontAwesomeIcon icon={['fa', 'user-circle']} size=\"3x\"\r\n              style={\r\n                max\r\n                  ? {\r\n                      marginTop: \"0px\",\r\n                      backgroundColor: \"#0360a5\",\r\n                      border: \"5px solid rgba(0,0,0,0.1)\",\r\n                      borderRadius: \"50%\",\r\n                    }\r\n                  : {\r\n                      marginTop: \"-32px\",\r\n                      backgroundColor: \"#0360a5\",\r\n                      border: \"5px solid rgba(0,0,0,0.1)\",\r\n                      borderRadius: \"50%\",\r\n                    }\r\n              }\r\n            />\r\n          </aside>\r\n          <aside style={{ flex: 6 }}>\r\n            <ChatboxTitle>\r\n              <small>Publishing as:</small>\r\n              <br />\r\n              <Wallet address={address} provider={provider} />\r\n            </ChatboxTitle>\r\n          </aside>\r\n          <aside style={{ flex: 3, textAlign: \"right\" }}>\r\n            <Button onClick={handleMinimise}>\r\n              <FontAwesomeIcon icon={['fa', 'window-restore']} />\r\n            </Button>\r\n            <Button onClick={handleClosePanel}>\r\n              <FontAwesomeIcon icon={['fa', 'times']} />\r\n            </Button>\r\n          </aside>\r\n        </PanelHeader>\r\n        <PanelMain style={{ flex: 1 }}>\r\n          <PanelHistory>\r\n            <MsgList id=\"scroll\">\r\n              {messages.length === 0 && (\r\n                <div>\r\n                  A fully decentralised chatbox <br /> powered by Streamr.\r\n                </div>\r\n              )}\r\n              {messages.map((message, index) => (\r\n                <ClearFix key={index}>\r\n                  {message.self ? (\r\n                    <div>\r\n                      <MessageSelfData>\r\n                        <small>{message.when}</small>&nbsp;&nbsp;&nbsp;\r\n                        <span>\r\n                          <Wallet address={message.from} provider={provider} />\r\n                        </span>\r\n                      </MessageSelfData>\r\n                      <MessageSelf>{message.text}</MessageSelf>\r\n                    </div> )\r\n                  : (\r\n                    <div>\r\n                      <MessageData>\r\n                        <span>\r\n                          <Wallet address={message.from} provider={provider} />\r\n                        </span>\r\n                        &nbsp;&nbsp;&nbsp;<small>{message.when}</small>\r\n                      </MessageData>\r\n                      <Message>{message.text}</Message>\r\n                    </div>\r\n                  )}\r\n                </ClearFix>\r\n              ))}\r\n            </MsgList>\r\n          </PanelHistory>\r\n        </PanelMain>\r\n        <PanelFooter>\r\n          <aside style={{ flex: 10 }}>\r\n            <ChatboxInput\r\n              type=\"text\"\r\n              placeholder=\"Type your message here...\"\r\n              autoFocus\r\n              onChange={handleChange}\r\n              value={text}\r\n            ></ChatboxInput>\r\n          </aside>\r\n          <aside style={{ flex: 1, color: \"#888\", textAlign: \"center\" }}>\r\n            <FontAwesomeIcon icon={['fa', 'paper-plane']} onClick={handleSubmit} />\r\n          </aside>\r\n        </PanelFooter>\r\n      </ChatboxPanel>\r\n    </ChatboxBase>\r\n  );\r\n}\r\n\r\nChatbox.propTypes = {\r\n  theme: PropTypes.object,\r\n  provider: PropTypes.object.isRequired,\r\n  address: PropTypes.string.isRequired,\r\n  streamID: PropTypes.string.isRequired,\r\n  DEBUG: PropTypes.bool,\r\n};\r\n\r\nexport default Chatbox;\r\n","import React, { useEffect, useState } from \"react\";\nimport Chatbox from \"streamr-chatbox\";\nimport \"./App.css\";\n\nconst { ethers } = require(\"ethers\");\n\nconst STREAM_ID = \"0x35d389B751943Cbf3fE3620a668566E97D5f0144/troll\";\n\nfunction App() {\n  const [ address, setAddress ] = useState();\n  const [ injectedProvider, setInjectedProvider ] = useState();\n  const [ connected, setConnected ] = useState(false);\n\n  useEffect(() => {\n    const fetchAccountData = async () => {\n      const provider = new ethers.providers.Web3Provider(window.ethereum, \"any\");\n      await provider.send(\"eth_requestAccounts\", []);\n      const signer = provider.getSigner();\n      const walletAddress = await signer.getAddress();\n      setInjectedProvider(provider);\n      setAddress(walletAddress);\n      setConnected(true);\n    };\n    fetchAccountData();\n  }, []);\n\n  return (\n    <div className=\"App\">\n      {connected && \n        <Chatbox provider={injectedProvider} address={address} streamID={STREAM_ID} />\n      }\n      </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}